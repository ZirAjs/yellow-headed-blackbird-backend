from rest_framework import serializers
from .models import Diary
from tasks.models import Task
from tasks.serializers import TaskSerializer
from caffeine.models import Caffeine
from caffeine.serializers import CaffeineSerializer


class DiarySerializer(serializers.ModelSerializer):
    # For writing: accept list of task IDs
    tasks = serializers.PrimaryKeyRelatedField(many=True, read_only=True)
    caffeine = serializers.PrimaryKeyRelatedField(many=True, read_only=True)
    user_id = serializers.IntegerField(source="user_id.id", read_only=True)
    due_time = serializers.DateTimeField(allow_null=False, required=True)

    class Meta:
        model = Diary
        fields = [
            "id",
            "user_id",
            "title",
            "description",
            "focus_time",
            "due_time",
            "created_time",
            "ended_time",
            "tasks",  # read-only task IDs
            "caffeine",  # read-only caffeine IDs
        ]


class DiaryDetailSerializer(serializers.ModelSerializer):
    # For writing: accept list of task IDs
    tasks = serializers.PrimaryKeyRelatedField(many=True, read_only=True)

    caffeine = serializers.PrimaryKeyRelatedField(many=True, read_only=True)
    user_id = serializers.IntegerField(source="user_id.id", read_only=True)
    due_time = serializers.DateTimeField(allow_null=False, required=True)

    # For reading: show actual task data
    task_details = serializers.SerializerMethodField(read_only=True)
    caffeine_details = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = Diary
        fields = [
            "id",
            "user_id",
            "title",
            "description",
            "focus_time",
            "due_time",
            "created_time",
            "ended_time",
            "tasks",  # read-only task IDs
            "task_details",  # read-only serialized task objects
            "caffeine",  # read-only caffeine IDs
            "caffeine_details",  # read-only serialized caffeine objects
        ]

    def get_task_details(self, obj):
        tasks = Task.objects.filter(diary_id=obj.id)
        return TaskSerializer(tasks, many=True).data

    def get_caffeine_details(self, obj):
        caffeine = Caffeine.objects.filter(diary_id=obj.id)
        return CaffeineSerializer(caffeine, many=True).data

    def validate(self, attrs):
        attrs = super().validate(attrs)

        # if ended_time is not null, do not allow modification
        if self.instance.ended_time:
            raise serializers.ValidationError(
                {"ended_time": "Cannot modify diary after it has ended."}
            )

        # ensure that focus_time is a proper JSON object with {"data":[{"start":Time, "end":Time}]}
        # Nasty validation generated by copilot
        focus_time = attrs.get("focus_time", None)
        if focus_time is None:
            return attrs

        if not isinstance(focus_time, dict):
            raise serializers.ValidationError(
                {"focus_time": "Focus time must be a JSON object."}
            )

        if "data" not in focus_time:
            raise serializers.ValidationError(
                {"focus_time": "Focus time must contain a 'data' key."}
            )

        if not isinstance(focus_time["data"], list):
            raise serializers.ValidationError(
                {"focus_time": "Focus time 'data' must be a list."}
            )

        for item in focus_time["data"]:
            if not isinstance(item, dict):
                raise serializers.ValidationError(
                    {"focus_time": "Each item in 'data' must be a dictionary."}
                )
            if "start" not in item or "end" not in item:
                raise serializers.ValidationError(
                    {
                        "focus_time": "Each item in 'data' must contain 'start' and 'end' keys."
                    }
                )
            if not isinstance(item["start"], str) or not isinstance(item["end"], str):
                raise serializers.ValidationError(
                    {
                        "focus_time": "'start' and 'end' values must be strings in ISO format."
                    }
                )
            # ensure that start and end are in ISO format or null
            start = item.get("start")
            end = item.get("end")

            try:
                if start:
                    serializers.DateTimeField().to_internal_value(start)
                if end:
                    serializers.DateTimeField().to_internal_value(end)
            except serializers.ValidationError:
                raise serializers.ValidationError(
                    {
                        "focus_time": "'start' and 'end' values must be strings in ISO format when provided."
                    }
                )

        return attrs
